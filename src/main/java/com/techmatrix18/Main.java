package com.techmatrix18;

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import marytts.LocalMaryInterface;
import marytts.MaryInterface;
import marytts.client.MaryClient;
import org.vosk.LibVosk;
import org.vosk.LogLevel;
import org.vosk.Model;
import org.vosk.Recognizer;
import javax.sound.sampled.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.Locale;
import java.util.Set;

public class Main {
    public static void main(String[] args) throws Exception {
        //System.out.println("Hello world!");

        LibVosk.setLogLevel(LogLevel.INFO);
        Model model = new Model("models/vosk-model-small-en-us-0.15"); // –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å
        Recognizer recognizer = new Recognizer(model, 16000);

        AudioFormat format = new AudioFormat(16000, 16, 1, true, false);
        DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
        TargetDataLine microphone = (TargetDataLine) AudioSystem.getLine(info);
        microphone.open(format);
        microphone.start();

        System.out.println("–ì–æ–≤–æ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...");
        System.out.println("–ì–æ–≤–æ—Ä–∏—Ç–µ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É...");

        /*byte[] buffer = new byte[4096];
        while (true) {
            int bytesRead = microphone.read(buffer, 0, buffer.length);
            if (recognizer.acceptWaveForm(buffer, bytesRead)) {
                String result = recognizer.getResult();
                System.out.println("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: " + result);

                //String text = extractText(result);
                String text = extractTextFromJson(result);
                System.out.println("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ text: " + text);
                if (text != null) {
                    String response = processCommand(text);
                    speak(response);
                }
            }
        }*/

        byte[] buffer = new byte[4096];
        String finalResultText = null;

        while (true) {
            while (finalResultText == null) {
                int bytesRead = microphone.read(buffer, 0, buffer.length);

                // acceptWaveForm –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∫–æ–≥–¥–∞ —Ñ—Ä–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                if (recognizer.acceptWaveForm(buffer, bytesRead)) {
                    String resultJson = recognizer.getResult();
                    finalResultText = extractTextFromJson(resultJson);
                } else {
                    // –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
                    // System.out.println("Partial: " + recognizer.getPartialResult());
                }
            }

            System.out.println("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: " + finalResultText);
            String response = processCommand(finalResultText);

            if (response.equals("stop")) break;
            // –í—ã–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω, —á—Ç–æ–±—ã –Ω–µ —Å–ª—ã—à–∞–ª —Å–µ–±—è
            microphone.close(); // ?
            microphone.flush(); // ?

            // –û—Ç–≤–µ—á–∞–µ—Ç
            speak(response);

            // –í–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            microphone.start(); // ?
        }

        microphone.close();
        recognizer.close();
        model.close();
    }

    public static void main2(String[] args) throws Exception {
        // start recorder
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—É–¥–∏–æ: 16 kHz, 16 –±–∏—Ç, 1 –∫–∞–Ω–∞–ª (–º–æ–Ω–æ), little-endian
        /*AudioFormat format = new AudioFormat(16000.0f, 16, 1, true, false);
        DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);

        if (!AudioSystem.isLineSupported(info)) {
            System.out.println("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.");
            return;
        }

        TargetDataLine microphone = (TargetDataLine) AudioSystem.getLine(info);
        microphone.open(format);
        microphone.start();

        System.out.println("üéô –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å... (5 —Å–µ–∫—É–Ω–¥)");

        AudioInputStream audioStream = new AudioInputStream(microphone);
        File wavFile = new File("output.wav");

        // –ó–∞–ø–∏—Å—å 5 —Å–µ–∫—É–Ω–¥
        Thread stopper = new Thread(() -> {
            try {
                Thread.sleep(5000);
                microphone.stop();
                microphone.close();
                System.out.println("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª: output.wav");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        stopper.start();
        AudioSystem.write(audioStream, AudioFileFormat.Type.WAVE, wavFile);*/
        // end recorder

        LibVosk.setLogLevel(LogLevel.INFO); // –û—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

        // en
        Model model = new Model("models/vosk-model-small-en-us-0.15");
        // ru
        //Model model = new Model("models/vosk-model-small-ru-0.22");
        // es
        //Model model = new Model("models/vosk-model-small-es-0.42");

        AudioFormat format = new AudioFormat(16000.0f, 16, 1, true, false);
        DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
        TargetDataLine microphone = (TargetDataLine) AudioSystem.getLine(info);
        microphone.open(format);
        microphone.start();

        Recognizer recognizer = new Recognizer(model, 16000.0f);
        byte[] buffer = new byte[4096];

        // list microphones
        Mixer.Info[] mixers = AudioSystem.getMixerInfo();

        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã):");
        for (int i = 0; i < mixers.length; i++) {
            Mixer mixer = AudioSystem.getMixer(mixers[i]);
            Line.Info[] targetLineInfo = mixer.getTargetLineInfo(); // Target = input

            if (targetLineInfo.length > 0) {
                System.out.println(i + ": " + mixers[i].getName() + " - " + mixers[i].getDescription());
            }
        }
        // end list

        System.out.println("üéô –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å... (5 —Å–µ–∫—É–Ω–¥)");
        System.out.println("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫—Ä—ã—Ç: " + microphone.isOpen());
        System.out.println("–ì–æ–≤–æ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...");

        //// –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        AudioInputStream audioStream = new AudioInputStream(microphone);
        File wavFile = new File("output.wav");
        // –ó–∞–ø–∏—Å—å 5 —Å–µ–∫—É–Ω–¥
        Thread stopper = new Thread(() -> {
            try {
                Thread.sleep(5000);
                microphone.stop();
                microphone.close();
                System.out.println("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª: output.wav");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        stopper.start();
        AudioSystem.write(audioStream, AudioFileFormat.Type.WAVE, wavFile);
        //// END –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª

        //// –ß–∏—Ç–∞–µ–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å —Ä–µ—á—å—é (16 kHz, mono, 16 bit)
        try (InputStream ais = new FileInputStream("output.wav")) {
            byte[] buffer1 = new byte[4096];
            int bytesRead;

            while ((bytesRead = ais.read(buffer1)) >= 0) {
                if (recognizer.acceptWaveForm(buffer1, bytesRead)) {
                    // —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ, –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    break;
                }
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        String resultJson = recognizer.getResult();
        // –ú–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—ã—Ç–∞—â–∏–º –ø–æ–ª–µ "text"
        String text = extractTextFromJson(resultJson);
        System.out.println("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: " + text);
        //// END

        //// –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç
        text = processCommand(text);


        /*while (true) {
            int bytesRead = microphone.read(buffer, 0, buffer.length);
            if (recognizer.acceptWaveForm(buffer, bytesRead)) {
                System.out.println(recognizer.getResult());
            } else {
                System.out.println(recognizer.getPartialResult());
            }
        }*/

        //// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ wav —Ñ–∞–π–ª–∞
        // –ó–∞–≥—Ä—É–∑–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å
        /*Model model1 = new Model("models/vosk-model-small-ru-0.22");

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º WAV-—Ñ–∞–π–ª
        AudioInputStream ais = AudioSystem.getAudioInputStream(new File("output.wav"));

        AudioFormat baseFormat = ais.getFormat();

        // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç ‚Äî 16 kHz, 16 –±–∏—Ç, –º–æ–Ω–æ
        AudioFormat targetFormat = new AudioFormat(16000.0f, 16, 1, true, false);
        AudioInputStream convertedAis = AudioSystem.getAudioInputStream(targetFormat, ais);

        Recognizer recognizer1 = new Recognizer(model1, 16000);
        byte[] buffer1 = new byte[4096];
        int bytesRead;

        while ((bytesRead = convertedAis.read(buffer1)) != -1) {
            if (recognizer1.acceptWaveForm(buffer1, bytesRead)) {
                System.out.println(recognizer1.getResult());
            } else {
                System.out.println(recognizer1.getPartialResult());
            }
        }

        System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + recognizer1.getFinalResult());*/
        //// END –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ wav —Ñ–∞–π–ª–∞

        //VoiceManager voiceManager = VoiceManager.getInstance();
        //Voice voice = voiceManager.getVoice("kevin");

        // –£–∫–∞–∑–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        /*System.setProperty("freetts.voices",
                "com.sun.speech.freetts.en.us.cmu_time_awb.AwbVoiceDirectory");
        Voice voice = VoiceManager.getInstance().getVoice("awb");*/
        /*System.setProperty("freetts.voices",
                "com.sun.speech.freetts.en.us.cmu_us_kal.KevinVoiceDirectory");
        Voice voice = VoiceManager.getInstance().getVoice("kevin16");

        if (voice != null) {
            voice.allocate();
            voice.speak("Hello, Alexander. This is Free TTS.");
            voice.deallocate();
        } else {
            System.out.println("Voice not found.");
        }*/

        //// MaryTTS
        MaryInterface marytts1 = new LocalMaryInterface();
        Set<String> voices = marytts1.getAvailableVoices();
        for (String voice : voices) {
            System.out.println("Available voice: " + voice);
        }

        /*MaryClient client = new MaryClient("http://localhost:59125");
        AudioInputStream audio = client.speak("Hello world", "cmu-slt-hsmm");*/

        MaryInterface marytts = new LocalMaryInterface();

        // –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å
        marytts.setVoice("cmu-slt-hsmm");
        //String text = "Hello, Alexander! How are you? Did you fuck anybody this night ?";

        // –í—ã–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        //marytts.setLocale(Locale.forLanguageTag("ru"));
        //marytts.setVoice("voxforge-ru-nsh");
        //String text = "–ü—Ä–∏–≤–µ—Ç, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä! –≠—Ç–æ —Ç–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.";

        // –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≤ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
        AudioInputStream audio = marytts.generateAudio(text);

        // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        Clip clip = AudioSystem.getClip();
        clip.open(audio);
        clip.start();

        // –ñ–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        Thread.sleep(clip.getMicrosecondLength() / 1000);
        //// END MaryTTS
    }

    private static String extractTextFromJson(String json) {
        // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Vosk (json –≤–∏–¥–∞ {"text":"..."} )
        int idx = json.indexOf("\"text\"");
        if (idx == -1) return "";
        int start = json.indexOf("\"", idx + 6) + 1;
        int end = json.indexOf("\"", start);
        return json.substring(start, end);
    }

    // –ò–∑–≤–ª–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Vosk
    private static String extractText(String jsonResult) {
        // –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        int start = jsonResult.indexOf("\"text\" : \"") + 9;
        int end = jsonResult.indexOf("\"", start);
        if (start >= 9 && end > start) {
            return jsonResult.substring(start, end);
        }
        return null;
    }

    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
    private static String processCommand(String text) {
        text = text.toLowerCase();
        if (text.contains("hello")) {
            return "Hello! How can I help you?";
        } else if (text.contains("time")) {
            return "The current time is " + java.time.LocalTime.now().toString();
        } else if (text.contains("up") || text.contains("stop")) {
            return "stop";
        } else {
            return "Sorry";
        }
    }

    // –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Å MaryTTS
    private static void speak(String text) throws Exception {
        marytts.LocalMaryInterface marytts = new marytts.LocalMaryInterface();
        marytts.setVoice("cmu-slt-hsmm"); // –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≥–æ–ª–æ—Å
        javax.sound.sampled.AudioInputStream audio = marytts.generateAudio(text);

        javax.sound.sampled.Clip clip = javax.sound.sampled.AudioSystem.getClip();
        clip.open(audio);
        clip.start();

        Thread.sleep(clip.getMicrosecondLength() / 1000);
    }
}